{"ast":null,"code":"export const fetchComments = () => {\n  return dispatch => {\n    return fetch(\"http://localhost:3001/api/v1/comments\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json()).then(response => {\n      if (response.error) {\n        console.log(response.error); // alert(response.error)\n      } else {\n        dispatch(setComments(response.data));\n      }\n    }); // .catch(alert)\n  };\n};\nexport const setComments = comments => {\n  return {\n    type: \"SET_COMMENTS\",\n    comments\n  };\n};\nexport const postComment = comment => {\n  return dispatch => {\n    return fetch(\"http://localhost:3001/api/v1/comments\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    }).then(resp => resp.json()).then(response => {\n      if (response.content) {\n        alert(response.content);\n      } else {\n        dispatch(addComment(response));\n      }\n    }).catch(alert);\n  };\n};\nexport const addComment = comment => {\n  return {\n    type: \"ADD_COMMENT\",\n    comment\n  };\n};\nexport const deleteComment = (commentId, history) => {\n  return dispatch => {\n    return fetch(`http://localhost:3001/api/v1/comments/${commentId}`, {\n      method: \"DELETE\"\n    }).then(resp => resp.json()).then(response => {\n      if (response.message) {\n        alert(response.message);\n        dispatch(deleteCommentStore(commentId));\n      } else {\n        throw new Error(response.errors);\n      }\n    }).catch(alert);\n  };\n};\nexport const deleteCommentStore = commentId => {\n  return {\n    type: \"DELETE_COMMENT\",\n    commentId\n  };\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/actions/comments.js"],"names":["fetchComments","dispatch","fetch","method","headers","then","resp","json","response","error","console","log","setComments","data","comments","type","postComment","comment","body","JSON","stringify","content","alert","addComment","catch","deleteComment","commentId","history","message","deleteCommentStore","Error","errors"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,MAAM;AACjC,SAAOC,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,uCAAD,EAA0C;AACpDC,MAAAA,MAAM,EAAE,KAD4C;AAEpDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAF2C,KAA1C,CAAL,CAMJC,IANI,CAMCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EANT,EAOJF,IAPI,CAOCG,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,KAArB,EADkB,CAElB;AACD,OAHD,MAGO;AACLR,QAAAA,QAAQ,CAACW,WAAW,CAACJ,QAAQ,CAACK,IAAV,CAAZ,CAAR;AACD;AACF,KAdI,CAAP,CADiB,CAgBjB;AACD,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMD,WAAW,GAAGE,QAAQ,IAAI;AACrC,SAAO;AACLC,IAAAA,IAAI,EAAE,cADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,WAAW,GAAGC,OAAO,IAAI;AACpC,SAAOhB,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,uCAAD,EAA0C;AACpDC,MAAAA,MAAM,EAAE,MAD4C;AAEpDC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,kBAAU;AAFH,OAF2C;AAMpDc,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,OAAf;AAN8C,KAA1C,CAAL,CAQJZ,IARI,CAQCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EART,EASJF,IATI,CASCG,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACa,OAAb,EAAsB;AACpBC,QAAAA,KAAK,CAACd,QAAQ,CAACa,OAAV,CAAL;AACD,OAFD,MAEO;AACLpB,QAAAA,QAAQ,CAACsB,UAAU,CAACf,QAAD,CAAX,CAAR;AACD;AACF,KAfI,EAgBJgB,KAhBI,CAgBEF,KAhBF,CAAP;AAiBD,GAlBD;AAmBD,CApBM;AAsBP,OAAO,MAAMC,UAAU,GAAGN,OAAO,IAAI;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,aADD;AAELE,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMQ,aAAa,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AACnD,SAAO1B,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAE,yCAAwCwB,SAAU,EAApD,EAAuD;AACjEvB,MAAAA,MAAM,EAAE;AADyD,KAAvD,CAAL,CAGJE,IAHI,CAGCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAHT,EAIJF,IAJI,CAICG,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACoB,OAAb,EAAsB;AACpBN,QAAAA,KAAK,CAACd,QAAQ,CAACoB,OAAV,CAAL;AACA3B,QAAAA,QAAQ,CAAC4B,kBAAkB,CAACH,SAAD,CAAnB,CAAR;AACD,OAHD,MAGO;AACL,cAAM,IAAII,KAAJ,CAAUtB,QAAQ,CAACuB,MAAnB,CAAN;AACD;AACF,KAXI,EAYJP,KAZI,CAYEF,KAZF,CAAP;AAaD,GAdD;AAeD,CAhBM;AAkBP,OAAO,MAAMO,kBAAkB,GAAGH,SAAS,IAAI;AAC7C,SAAO;AACLX,IAAAA,IAAI,EAAE,gBADD;AAELW,IAAAA;AAFK,GAAP;AAID,CALM","sourcesContent":["export const fetchComments = () => {\n  return dispatch => {\n    return fetch(\"http://localhost:3001/api/v1/comments\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(resp => resp.json())\n      .then(response => {\n        if (response.error) {\n          console.log(response.error)\n          // alert(response.error)\n        } else {\n          dispatch(setComments(response.data))\n        }\n      })\n    // .catch(alert)\n  }\n}\n\nexport const setComments = comments => {\n  return {\n    type: \"SET_COMMENTS\",\n    comments\n  }\n}\n\nexport const postComment = comment => {\n  return dispatch => {\n    return fetch(\"http://localhost:3001/api/v1/comments\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    })\n      .then(resp => resp.json())\n      .then(response => {\n        if (response.content) {\n          alert(response.content)\n        } else {\n          dispatch(addComment(response))\n        }\n      })\n      .catch(alert)\n  }\n}\n\nexport const addComment = comment => {\n  return {\n    type: \"ADD_COMMENT\",\n    comment\n  }\n}\n\nexport const deleteComment = (commentId, history) => {\n  return dispatch => {\n    return fetch(`http://localhost:3001/api/v1/comments/${commentId}`, {\n      method: \"DELETE\",\n    })\n      .then(resp => resp.json())\n      .then(response => {\n        if (response.message) {\n          alert(response.message)\n          dispatch(deleteCommentStore(commentId))\n        } else {\n          throw new Error(response.errors)\n        }\n      })\n      .catch(alert)\n  }\n}\n\nexport const deleteCommentStore = commentId => {\n  return {\n    type: \"DELETE_COMMENT\",\n    commentId\n  }\n}"]},"metadata":{},"sourceType":"module"}