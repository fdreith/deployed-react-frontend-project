{"ast":null,"code":"export default ((state = [], action) => {\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const sortedTasks = sortByDate(tasks);\n      return sortedTasks;\n\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task);\n      const newTasks = sortByDate([...state, newTask]);\n      return newTasks;\n\n    case 'UPDATE_TASK':\n      debugger;\n      const convertedTask = convertDates(action.task);\n      const updatedTasks = sortByDate(state.map(task => replaceIfEqual(task, convertedTask)));\n      return { ...state,\n        updatedTasks\n      };\n\n    case 'DELETE_TASK':\n      const filteredTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n      return { ...state,\n        filteredTasks\n      };\n\n    default:\n      return state;\n  }\n});\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.attributes.id === actionTask.attributes.id) {\n    return actionTask;\n  } else {\n    return task;\n  }\n};\n\nconst convertDates = tasks => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date);\n      return task;\n    });\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date);\n    return tasks;\n  }\n};\n\nconst sortByDate = tasks => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date;\n    const dueDateB = b.attributes.due_date;\n\n    if (dueDateA < dueDateB) {\n      return -1;\n    }\n\n    if (dueDateA > dueDateB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","action","type","tasks","convertDates","sortedTasks","sortByDate","newTask","task","newTasks","convertedTask","updatedTasks","map","replaceIfEqual","filteredTasks","myTasks","filter","parseInt","id","taskId","actionTask","attributes","Array","isArray","due_date","Date","sort","a","b","dueDateA","dueDateB"],"mappings":"AAAA,gBAAe,CAACA,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAGrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,YAAMC,KAAK,GAAGC,YAAY,CAACH,MAAM,CAACE,KAAR,CAA1B;AACA,YAAME,WAAW,GAAGC,UAAU,CAACH,KAAD,CAA9B;AACA,aAAOE,WAAP;;AACF,SAAK,UAAL;AACE,YAAME,OAAO,GAAGH,YAAY,CAACH,MAAM,CAACO,IAAR,CAA5B;AACA,YAAMC,QAAQ,GAAGH,UAAU,CAAC,CAAC,GAAGN,KAAJ,EAAWO,OAAX,CAAD,CAA3B;AACA,aAAOE,QAAP;;AACF,SAAK,aAAL;AACE;AACA,YAAMC,aAAa,GAAGN,YAAY,CAACH,MAAM,CAACO,IAAR,CAAlC;AACA,YAAMG,YAAY,GAAGL,UAAU,CAACN,KAAK,CAACY,GAAN,CAAUJ,IAAI,IAAIK,cAAc,CAACL,IAAD,EAAOE,aAAP,CAAhC,CAAD,CAA/B;AACA,aAAO,EAAE,GAAGV,KAAL;AAAYW,QAAAA;AAAZ,OAAP;;AACF,SAAK,aAAL;AACE,YAAMG,aAAa,GAAGd,KAAK,CAACe,OAAN,CAAcC,MAAd,CAAqBR,IAAI,IAAIS,QAAQ,CAACT,IAAI,CAACU,EAAN,CAAR,KAAsBjB,MAAM,CAACkB,MAA1D,CAAtB;AACA,aAAO,EAAE,GAAGnB,KAAL;AAAYc,QAAAA;AAAZ,OAAP;;AACF;AACE,aAAOd,KAAP;AAlBJ;AAoBD,CAvBD;;AAyBA,MAAMa,cAAc,GAAG,CAACL,IAAD,EAAOY,UAAP,KAAsB;AAC3C,MAAIZ,IAAI,CAACa,UAAL,CAAgBH,EAAhB,KAAuBE,UAAU,CAACC,UAAX,CAAsBH,EAAjD,EAAqD;AACnD,WAAOE,UAAP;AACD,GAFD,MAEO;AACL,WAAOZ,IAAP;AACD;AACF,CAND;;AAQA,MAAMJ,YAAY,GAAID,KAAD,IAAW;AAC9B,MAAImB,KAAK,CAACC,OAAN,CAAcpB,KAAd,CAAJ,EAA0B;AACxB,WAAOA,KAAK,CAACS,GAAN,CAAUJ,IAAI,IAAI;AACvBA,MAAAA,IAAI,CAACa,UAAL,CAAgBG,QAAhB,GAA2B,IAAIC,IAAJ,CAASjB,IAAI,CAACa,UAAL,CAAgBG,QAAzB,CAA3B;AACA,aAAOhB,IAAP;AACD,KAHM,CAAP;AAID,GALD,MAKO;AACLL,IAAAA,KAAK,CAACkB,UAAN,CAAiBG,QAAjB,GAA4B,IAAIC,IAAJ,CAAStB,KAAK,CAACkB,UAAN,CAAiBG,QAA1B,CAA5B;AACA,WAAOrB,KAAP;AACD;AACF,CAVD;;AAYA,MAAMG,UAAU,GAAIH,KAAD,IAAW;AAC5B,SAAOA,KAAK,CAACuB,IAAN,CAAW,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChC,UAAMC,QAAQ,GAAGF,CAAC,CAACN,UAAF,CAAaG,QAA9B;AACA,UAAMM,QAAQ,GAAGF,CAAC,CAACP,UAAF,CAAaG,QAA9B;;AACA,QAAIK,QAAQ,GAAGC,QAAf,EAAyB;AACvB,aAAO,CAAC,CAAR;AACD;;AACD,QAAID,QAAQ,GAAGC,QAAf,EAAyB;AACvB,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAVM,CAAP;AAWD,CAZD","sourcesContent":["export default (state = [], action) => {\n\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const sortedTasks = sortByDate(tasks)\n      return sortedTasks\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task)\n      const newTasks = sortByDate([...state, newTask])\n      return newTasks\n    case 'UPDATE_TASK':\n      debugger\n      const convertedTask = convertDates(action.task)\n      const updatedTasks = sortByDate(state.map(task => replaceIfEqual(task, convertedTask)))\n      return { ...state, updatedTasks }\n    case 'DELETE_TASK':\n      const filteredTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n      return { ...state, filteredTasks }\n    default:\n      return state\n  }\n}\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.attributes.id === actionTask.attributes.id) {\n    return actionTask\n  } else {\n    return task\n  }\n}\n\nconst convertDates = (tasks) => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date)\n      return task\n    })\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date)\n    return tasks\n  }\n}\n\nconst sortByDate = (tasks) => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date\n    const dueDateB = b.attributes.due_date\n    if (dueDateA < dueDateB) {\n      return -1\n    }\n    if (dueDateA > dueDateB) {\n      return 1\n    }\n    return 0\n  })\n}\n"]},"metadata":{},"sourceType":"module"}