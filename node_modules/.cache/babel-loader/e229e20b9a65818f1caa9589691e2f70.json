{"ast":null,"code":"export default ((state = {\n  myTasks: [// {\n    // id: \"\",\n    // type: \"\",\n    // attributes: { id: \"\", content: \"\", due_date: \"\", completed: \"\", comments: [] }, user: \"\", owner: \"\"\n    // }\n  ],\n  assignedTasks: [],\n  allTasks: []\n}, action) => {\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id);\n      const myTasks = tasks.filter(task => task.type === \"task\");\n      return {\n        myTasks,\n        assignedTasks\n      };\n\n    case 'ADD_TASK':\n      if (myTasks(action)) {\n        return { ...state.myTasks,\n          ...action.task\n        };\n      } else {\n        return { ...state.assignedTasks,\n          ...action.task\n        };\n      }\n\n    case 'UPDATE_TASK':\n      debugger;\n\n      if (isMyTasks(action)) {\n        return state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n      } else {\n        return state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n      }\n\n    case 'DELETE_TASK':\n      return state.filter(task => task.id !== action.id);\n\n    default:\n      return state;\n  }\n});\n\nconst convertDates = tasks => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date);\n    return task;\n  });\n};\n\nconst isMyTasks = action => {\n  return action.task.relationships.user.data.id === action.task.relationships.owner.data.id;\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","myTasks","assignedTasks","allTasks","action","type","tasks","convertDates","filter","task","relationships","user","data","id","owner","isMyTasks","map","attributes","due_date","Date"],"mappings":"AAAA,gBAAe,CAACA,KAAK,GAAG;AACtBC,EAAAA,OAAO,EAAE,CACP;AACA;AACA;AACA;AACA;AALO,GADa;AAOnBC,EAAAA,aAAa,EAAE,EAPI;AAOAC,EAAAA,QAAQ,EAAE;AAPV,CAAT,EAQZC,MARY,KAQD;AAEZ,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,YAAMC,KAAK,GAAGC,YAAY,CAACH,MAAM,CAACE,KAAR,CAA1B;AACA,YAAMJ,aAAa,GAAGI,KAAK,CAACE,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACJ,IAAL,KAAc,eAAnC,EAAoDG,MAApD,CAA2DC,IAAI,IAAIA,IAAI,CAACC,aAAL,CAAmBC,IAAnB,CAAwBC,IAAxB,CAA6BC,EAA7B,KAAoCJ,IAAI,CAACC,aAAL,CAAmBI,KAAnB,CAAyBF,IAAzB,CAA8BC,EAArI,CAAtB;AACA,YAAMZ,OAAO,GAAGK,KAAK,CAACE,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACJ,IAAL,KAAc,MAAnC,CAAhB;AACA,aAAO;AAAEJ,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAP;;AACF,SAAK,UAAL;AACE,UAAID,OAAO,CAACG,MAAD,CAAX,EAAqB;AACnB,eAAO,EAAE,GAAGJ,KAAK,CAACC,OAAX;AAAoB,aAAGG,MAAM,CAACK;AAA9B,SAAP;AACD,OAFD,MAEO;AACL,eAAO,EAAE,GAAGT,KAAK,CAACE,aAAX;AAA0B,aAAGE,MAAM,CAACK;AAApC,SAAP;AACD;;AACH,SAAK,aAAL;AACE;;AACA,UAAIM,SAAS,CAACX,MAAD,CAAb,EAAuB;AACrB,eAAOJ,KAAK,CAACC,OAAN,CAAce,GAAd,CAAkBP,IAAI,IAAI;AAC/B,cAAIA,IAAI,CAACI,EAAL,KAAYT,MAAM,CAACK,IAAP,CAAYI,EAA5B,EAAgC;AAC9B,mBAAOT,MAAM,CAACK,IAAd;AACD,WAFD,MAEO;AACL,mBAAOA,IAAP;AACD;AACF,SANM,CAAP;AAOD,OARD,MAQO;AACL,eAAOT,KAAK,CAACE,aAAN,CAAoBc,GAApB,CAAwBP,IAAI,IAAI;AACrC,cAAIA,IAAI,CAACI,EAAL,KAAYT,MAAM,CAACK,IAAP,CAAYI,EAA5B,EAAgC;AAC9B,mBAAOT,MAAM,CAACK,IAAd;AACD,WAFD,MAEO;AACL,mBAAOA,IAAP;AACD;AACF,SANM,CAAP;AAOD;;AAEH,SAAK,aAAL;AACE,aAAOT,KAAK,CAACQ,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYT,MAAM,CAACS,EAAxC,CAAP;;AACF;AACE,aAAOb,KAAP;AAnCJ;AAqCD,CA/CD;;AAiDA,MAAMO,YAAY,GAAID,KAAD,IAAW;AAC9B,SAAOA,KAAK,CAACU,GAAN,CAAUP,IAAI,IAAI;AACvBA,IAAAA,IAAI,CAACQ,UAAL,CAAgBC,QAAhB,GAA2B,IAAIC,IAAJ,CAASV,IAAI,CAACQ,UAAL,CAAgBC,QAAzB,CAA3B;AACA,WAAOT,IAAP;AACD,GAHM,CAAP;AAID,CALD;;AAOA,MAAMM,SAAS,GAAIX,MAAD,IAAY;AAC5B,SAAOA,MAAM,CAACK,IAAP,CAAYC,aAAZ,CAA0BC,IAA1B,CAA+BC,IAA/B,CAAoCC,EAApC,KAA2CT,MAAM,CAACK,IAAP,CAAYC,aAAZ,CAA0BI,KAA1B,CAAgCF,IAAhC,CAAqCC,EAAvF;AACD,CAFD","sourcesContent":["export default (state = {\n  myTasks: [\n    // {\n    // id: \"\",\n    // type: \"\",\n    // attributes: { id: \"\", content: \"\", due_date: \"\", completed: \"\", comments: [] }, user: \"\", owner: \"\"\n    // }\n  ], assignedTasks: [], allTasks: []\n}, action) => {\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n      const myTasks = tasks.filter(task => task.type === \"task\")\n      return { myTasks, assignedTasks }\n    case 'ADD_TASK':\n      if (myTasks(action)) {\n        return { ...state.myTasks, ...action.task }\n      } else {\n        return { ...state.assignedTasks, ...action.task }\n      }\n    case 'UPDATE_TASK':\n      debugger\n      if (isMyTasks(action)) {\n        return state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n      } else {\n        return state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n      }\n\n    case 'DELETE_TASK':\n      return state.filter(task => task.id !== action.id)\n    default:\n      return state\n  }\n}\n\nconst convertDates = (tasks) => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date)\n    return task\n  })\n}\n\nconst isMyTasks = (action) => {\n  return action.task.relationships.user.data.id === action.task.relationships.owner.data.id\n}"]},"metadata":{},"sourceType":"module"}