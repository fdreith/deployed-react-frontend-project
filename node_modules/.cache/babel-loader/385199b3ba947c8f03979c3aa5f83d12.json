{"ast":null,"code":"export default ((state = [], action) => {\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const sortedTasks = sortByDate(tasks);\n      return sortedTasks;\n\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task);\n      const newTasks = sortByDate([...state, newTask]);\n      return newTasks;\n\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task);\n      debugger;\n      const updatedTasks = sortByDate(state.map(task => {\n        if (task.attributes.id === convertedTask.attributes.id) {\n          return convertedTask;\n        } else {\n          return task;\n        }\n      }));\n      return updatedTasks;\n\n    case 'DELETE_TASK':\n      const filteredTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n      return filteredTasks;\n\n    default:\n      return state;\n  }\n}); // const replaceIfEqual = (task, actionTask) => {\n//   if (task.attributes.id === actionTask.attributes.id) {\n//     return actionTask\n//   } else {\n//     return task\n//   }\n// }\n\nconst convertDates = tasks => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date);\n      return task;\n    });\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date);\n    return tasks;\n  }\n};\n\nconst sortByDate = tasks => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date;\n    const dueDateB = b.attributes.due_date;\n\n    if (dueDateA < dueDateB) {\n      return -1;\n    }\n\n    if (dueDateA > dueDateB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","action","type","tasks","convertDates","sortedTasks","sortByDate","newTask","task","newTasks","convertedTask","updatedTasks","map","attributes","id","filteredTasks","myTasks","filter","parseInt","taskId","Array","isArray","due_date","Date","sort","a","b","dueDateA","dueDateB"],"mappings":"AAAA,gBAAe,CAACA,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAErC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,YAAMC,KAAK,GAAGC,YAAY,CAACH,MAAM,CAACE,KAAR,CAA1B;AACA,YAAME,WAAW,GAAGC,UAAU,CAACH,KAAD,CAA9B;AACA,aAAOE,WAAP;;AACF,SAAK,UAAL;AACE,YAAME,OAAO,GAAGH,YAAY,CAACH,MAAM,CAACO,IAAR,CAA5B;AACA,YAAMC,QAAQ,GAAGH,UAAU,CAAC,CAAC,GAAGN,KAAJ,EAAWO,OAAX,CAAD,CAA3B;AACA,aAAOE,QAAP;;AACF,SAAK,aAAL;AACE,YAAMC,aAAa,GAAGN,YAAY,CAACH,MAAM,CAACO,IAAR,CAAlC;AACA;AACA,YAAMG,YAAY,GAAGL,UAAU,CAACN,KAAK,CAACY,GAAN,CAAUJ,IAAI,IAAI;AAChD,YAAIA,IAAI,CAACK,UAAL,CAAgBC,EAAhB,KAAuBJ,aAAa,CAACG,UAAd,CAAyBC,EAApD,EAAwD;AACtD,iBAAOJ,aAAP;AACD,SAFD,MAEO;AACL,iBAAOF,IAAP;AACD;AACF,OAN+B,CAAD,CAA/B;AAOA,aAAOG,YAAP;;AACF,SAAK,aAAL;AACE,YAAMI,aAAa,GAAGf,KAAK,CAACgB,OAAN,CAAcC,MAAd,CAAqBT,IAAI,IAAIU,QAAQ,CAACV,IAAI,CAACM,EAAN,CAAR,KAAsBb,MAAM,CAACkB,MAA1D,CAAtB;AACA,aAAOJ,aAAP;;AACF;AACE,aAAOf,KAAP;AAxBJ;AA0BD,CA5BD,E,CA8BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,YAAY,GAAID,KAAD,IAAW;AAC9B,MAAIiB,KAAK,CAACC,OAAN,CAAclB,KAAd,CAAJ,EAA0B;AACxB,WAAOA,KAAK,CAACS,GAAN,CAAUJ,IAAI,IAAI;AACvBA,MAAAA,IAAI,CAACK,UAAL,CAAgBS,QAAhB,GAA2B,IAAIC,IAAJ,CAASf,IAAI,CAACK,UAAL,CAAgBS,QAAzB,CAA3B;AACA,aAAOd,IAAP;AACD,KAHM,CAAP;AAID,GALD,MAKO;AACLL,IAAAA,KAAK,CAACU,UAAN,CAAiBS,QAAjB,GAA4B,IAAIC,IAAJ,CAASpB,KAAK,CAACU,UAAN,CAAiBS,QAA1B,CAA5B;AACA,WAAOnB,KAAP;AACD;AACF,CAVD;;AAYA,MAAMG,UAAU,GAAIH,KAAD,IAAW;AAC5B,SAAOA,KAAK,CAACqB,IAAN,CAAW,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChC,UAAMC,QAAQ,GAAGF,CAAC,CAACZ,UAAF,CAAaS,QAA9B;AACA,UAAMM,QAAQ,GAAGF,CAAC,CAACb,UAAF,CAAaS,QAA9B;;AACA,QAAIK,QAAQ,GAAGC,QAAf,EAAyB;AACvB,aAAO,CAAC,CAAR;AACD;;AACD,QAAID,QAAQ,GAAGC,QAAf,EAAyB;AACvB,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAVM,CAAP;AAWD,CAZD","sourcesContent":["export default (state = [], action) => {\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const sortedTasks = sortByDate(tasks)\n      return sortedTasks\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task)\n      const newTasks = sortByDate([...state, newTask])\n      return newTasks\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task)\n      debugger\n      const updatedTasks = sortByDate(state.map(task => {\n        if (task.attributes.id === convertedTask.attributes.id) {\n          return convertedTask\n        } else {\n          return task\n        }\n      }))\n      return updatedTasks\n    case 'DELETE_TASK':\n      const filteredTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n      return filteredTasks\n    default:\n      return state\n  }\n}\n\n// const replaceIfEqual = (task, actionTask) => {\n//   if (task.attributes.id === actionTask.attributes.id) {\n//     return actionTask\n//   } else {\n//     return task\n//   }\n// }\n\nconst convertDates = (tasks) => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date)\n      return task\n    })\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date)\n    return tasks\n  }\n}\n\nconst sortByDate = (tasks) => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date\n    const dueDateB = b.attributes.due_date\n    if (dueDateA < dueDateB) {\n      return -1\n    }\n    if (dueDateA > dueDateB) {\n      return 1\n    }\n    return 0\n  })\n}\n"]},"metadata":{},"sourceType":"module"}