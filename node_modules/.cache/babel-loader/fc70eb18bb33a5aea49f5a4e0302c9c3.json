{"ast":null,"code":"export default ((state = {\n  myTasks: [],\n  assignedTasks: [],\n  completedTasks: []\n}, action) => {\n  const isMyTask = task => {\n    return task.attributes.user.id === task.attributes.owner.id;\n  };\n\n  const isInMyTaskState = taskId => {\n    return state.myTasks.find(task => parseInt(task.id) === taskId);\n  };\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id).filter(task => task.attributes.completed === false);\n      const myTasks = tasks.filter(task => task.type === \"task\").filter(task => task.attributes.completed === false);\n      const completedTasks = tasks.filter(task => task.attributes.completed === true).filter(task => task.type === \"task\");\n      return {\n        myTasks,\n        assignedTasks,\n        completedTasks\n      };\n\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task);\n\n      if (isMyTask(action.task)) {\n        return { ...state,\n          myTasks: [...state.myTasks, newTask]\n        };\n      } else {\n        return { ...state,\n          assignedTasks: [...state.assignedTasks, newTask]\n        };\n      }\n\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task);\n\n      if (isInMyTaskState(action.task.attributes.id)) {\n        if (isMyTask(action.task)) {\n          const myTasks = state.myTasks.map(task => replaceIfEqual(task, convertedTask));\n          return { ...state,\n            myTasks\n          };\n        } else {\n          const newMyTasks = state.myTasks.filter(task => parseInt(task.id) !== action.task.attributes.id);\n          return { ...state,\n            myTasks: newMyTasks,\n            assignedTasks: [...state.assignedTasks, convertedTask]\n          };\n        }\n      } else {\n        if (isMyTask(action.task)) {\n          const newAssignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.task.attributes.id);\n          return { ...state,\n            myTasks: [...state.myTasks, convertedTask],\n            assignedTasks: newAssignedTasks\n          };\n        } else {\n          const assignedTasks = state.assignedTasks.map(task => replaceIfEqual(task, convertedTask));\n          return { ...state,\n            assignedTasks\n          };\n        }\n      }\n\n    case 'COMPLETED_TASK':\n      if (isInMyTaskState(action.task.attributes.id)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id);\n        const completedTasks = [...state.completedTasks, action.task];\n        return { ...state,\n          myTasks,\n          completedTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'DELETE_TASK':\n      if (isInMyTaskState(action.taskId)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'UPDATE_PRIORITY':\n      const updatePriority = {\n        priority: action.task.counter + 1\n      };\n      const prioritizedTask = { ...action.task.task,\n        ...updatePriority\n      };\n\n      if (isInMyTaskState(action.task.task.attributes.id)) {\n        const myTasks = state.myTasks.map(task => {\n          return replaceIfEqual(task, prioritizedTask);\n        });\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => {\n          return replaceIfEqual(task, prioritizedTask);\n        });\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    default:\n      return state;\n  }\n});\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.attributes.id === actionTask.attributes.id) {\n    return actionTask;\n  } else {\n    return task;\n  }\n};\n\nconst convertDates = tasks => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date);\n      return task;\n    });\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date);\n    return tasks;\n  }\n};\n\nconst sortByDate = tasks => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date;\n    const dueDateB = b.attributes.due_date;\n\n    if (dueDateA < dueDateB) {\n      return -1;\n    }\n\n    if (dueDateA > dueDateB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","myTasks","assignedTasks","completedTasks","action","isMyTask","task","attributes","user","id","owner","isInMyTaskState","taskId","find","parseInt","type","tasks","convertDates","filter","relationships","data","completed","newTask","convertedTask","map","replaceIfEqual","newMyTasks","newAssignedTasks","updatePriority","priority","counter","prioritizedTask","actionTask","Array","isArray","due_date","Date","sortByDate","sort","a","b","dueDateA","dueDateB"],"mappings":"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","sourcesContent":["export default (state = {\n  myTasks: [], assignedTasks: [], completedTasks: []\n}, action) => {\n\n  const isMyTask = (task) => {\n    return task.attributes.user.id === task.attributes.owner.id\n  }\n\n  const isInMyTaskState = taskId => {\n    return state.myTasks.find(task => parseInt(task.id) === taskId)\n  }\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\")\n        .filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n        .filter(task => task.attributes.completed === false)\n      const myTasks = tasks.filter(task => task.type === \"task\")\n        .filter(task => task.attributes.completed === false)\n      const completedTasks = (tasks.filter(task => task.attributes.completed === true)\n        .filter(task => task.type === \"task\"))\n      return { myTasks, assignedTasks, completedTasks }\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task)\n      if (isMyTask(action.task)) {\n        return { ...state, myTasks: [...state.myTasks, newTask] }\n      } else {\n        return { ...state, assignedTasks: [...state.assignedTasks, newTask] }\n      }\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task)\n      if (isInMyTaskState(action.task.attributes.id)) {\n        if (isMyTask(action.task)) {\n          const myTasks = state.myTasks.map(task => replaceIfEqual(task, convertedTask))\n          return { ...state, myTasks }\n        } else {\n          const newMyTasks = state.myTasks.filter(task => parseInt(task.id) !== action.task.attributes.id)\n          return { ...state, myTasks: newMyTasks, assignedTasks: [...state.assignedTasks, convertedTask] }\n        }\n      } else {\n        if (isMyTask(action.task)) {\n          const newAssignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.task.attributes.id)\n          return { ...state, myTasks: [...state.myTasks, convertedTask], assignedTasks: newAssignedTasks }\n        }\n        else {\n          const assignedTasks = state.assignedTasks.map(task => replaceIfEqual(task, convertedTask))\n          return { ...state, assignedTasks }\n        }\n      }\n    case 'COMPLETED_TASK':\n      if (isInMyTaskState(action.task.attributes.id)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id)\n        const completedTasks = [...state.completedTasks, action.task]\n        return { ...state, myTasks, completedTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id)\n        return { ...state, assignedTasks }\n      }\n    case 'DELETE_TASK':\n      if (isInMyTaskState(action.taskId)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, assignedTasks }\n      }\n    case 'UPDATE_PRIORITY':\n      const updatePriority = { priority: action.task.counter + 1 }\n      const prioritizedTask = { ...action.task.task, ...updatePriority }\n      if (isInMyTaskState(action.task.task.attributes.id)) {\n        const myTasks = state.myTasks.map(task => {\n          return replaceIfEqual(task, prioritizedTask)\n        })\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => {\n          return replaceIfEqual(task, prioritizedTask)\n        })\n        return { ...state, assignedTasks }\n      }\n    default:\n      return state\n  }\n}\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.attributes.id === actionTask.attributes.id) {\n    return actionTask\n  } else {\n    return task\n  }\n}\n\nconst convertDates = (tasks) => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date)\n      return task\n    })\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date)\n    return tasks\n  }\n}\n\nconst sortByDate = (tasks) => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date\n    const dueDateB = b.attributes.due_date\n    if (dueDateA < dueDateB) {\n      return -1\n    }\n    if (dueDateA > dueDateB) {\n      return 1\n    }\n    return 0\n  })\n}\n"]},"metadata":{},"sourceType":"module"}