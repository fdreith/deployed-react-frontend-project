{"ast":null,"code":"export default ((state = {\n  myTasks: [],\n  assignedTasks: [],\n  completedTasks: []\n}, action) => {\n  const isMyTask = action => {\n    if (action.task) {\n      return action.task.relationships.user.data.id === action.task.relationships.owner.data.id;\n    } else if (action.taskId) {\n      return state.myTasks.find(task => parseInt(task.id) === action.taskId);\n    } else {\n      return state.myTasks.find(task => parseInt(task.id) === action.comment.task_id);\n    }\n  };\n\n  const isCompleted = action => {\n    if (action.task) {\n      return action.task.attributes.completed;\n    } else if (action.taskId) {\n      return state.completedTasks.find(task => parseInt(task.id) === action.taskId);\n    } else {\n      return state.completedTasks.find(task => parseInt(task.id) === action.comment.task_id);\n    }\n  };\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id).filter(task => task.attributes.completed === false);\n      const myTasks = tasks.filter(task => task.type === \"task\").filter(task => task.attributes.completed === false);\n      const completedTasks = tasks.filter(task => task.attributes.completed === true).filter(task => task.type === \"task\");\n      return {\n        myTasks,\n        assignedTasks,\n        completedTasks\n      };\n\n    case 'ADD_TASK':\n      if (isMyTask(action)) {\n        return { ...state,\n          myTasks: [...state.myTasks, action.task]\n        };\n      } else {\n        return { ...state,\n          assignedTasks: [...state.assignedTasks, action.task]\n        };\n      }\n\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action);\n\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.map(task => replaceIfEqual(task, action.task));\n        return { ...state,\n          completedTasks\n        };\n      } else if (isMyTask(action)) {\n        debugger;\n        const myTasks = state.myTasks.map(task => replaceIfEqual(task, action.task));\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => replaceIfEqual(task, action.task));\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'COMPLETED_TASK':\n      if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id);\n        const completedTasks = [...state.completedTasks, action.task];\n        return { ...state,\n          myTasks,\n          completedTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'DELETE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          completedTasks\n        };\n      } else if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    default:\n      return state;\n  }\n});\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.id === actionTask.id) {\n    return actionTask;\n  } else {\n    return task;\n  }\n};\n\nconst sortByDate = tasks => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date;\n    const dueDateB = b.attributes.due_date;\n\n    if (dueDateA < dueDateB) {\n      return -1;\n    }\n\n    if (dueDateA > dueDateB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};\n\nconst convertDates = tasks => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date);\n      return task;\n    });\n  } else {\n    return tasks.task.attributes.due_date = new Date(tasks.task.attributes.due_date);\n    return task;\n    debugger;\n  }\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","myTasks","assignedTasks","completedTasks","action","isMyTask","task","relationships","user","data","id","owner","taskId","find","parseInt","comment","task_id","isCompleted","attributes","completed","type","tasks","convertDates","filter","convertedTask","map","replaceIfEqual","actionTask","sortByDate","sort","a","b","dueDateA","due_date","dueDateB","Array","isArray","Date"],"mappings":"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","sourcesContent":["export default (state = {\n  myTasks: [], assignedTasks: [], completedTasks: []\n}, action) => {\n\n  const isMyTask = (action) => {\n    if (action.task) {\n      return action.task.relationships.user.data.id === action.task.relationships.owner.data.id\n    } else if (action.taskId) {\n      return state.myTasks.find(task => parseInt(task.id) === action.taskId)\n    } else {\n      return state.myTasks.find(task => parseInt(task.id) === action.comment.task_id)\n    }\n  }\n\n  const isCompleted = (action) => {\n    if (action.task) {\n      return action.task.attributes.completed\n    } else if (action.taskId) {\n      return state.completedTasks.find(task => parseInt(task.id) === action.taskId)\n    } else {\n      return state.completedTasks.find(task => parseInt(task.id) === action.comment.task_id)\n    }\n  }\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\")\n        .filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n        .filter(task => task.attributes.completed === false)\n      const myTasks = tasks.filter(task => task.type === \"task\")\n        .filter(task => task.attributes.completed === false)\n      const completedTasks = tasks.filter(task => task.attributes.completed === true)\n        .filter(task => task.type === \"task\")\n      return { myTasks, assignedTasks, completedTasks }\n    case 'ADD_TASK':\n      if (isMyTask(action)) {\n        return { ...state, myTasks: [...state.myTasks, action.task] }\n      } else {\n        return { ...state, assignedTasks: [...state.assignedTasks, action.task] }\n      }\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action)\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.map(task => replaceIfEqual(task, action.task))\n        return { ...state, completedTasks }\n      }\n      else if (isMyTask(action)) {\n        debugger\n        const myTasks = state.myTasks.map(task => replaceIfEqual(task, action.task))\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => replaceIfEqual(task, action.task))\n        return { ...state, assignedTasks }\n      }\n    case 'COMPLETED_TASK':\n      if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id)\n        const completedTasks = [...state.completedTasks, action.task]\n        return { ...state, myTasks, completedTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id)\n        return { ...state, assignedTasks }\n      }\n    case 'DELETE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, completedTasks }\n      } else if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, assignedTasks }\n      }\n    default:\n      return state\n  }\n}\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.id === actionTask.id) {\n    return actionTask\n  } else {\n    return task\n  }\n}\n\nconst sortByDate = (tasks) => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date\n    const dueDateB = b.attributes.due_date\n    if (dueDateA < dueDateB) {\n      return -1\n    }\n    if (dueDateA > dueDateB) {\n      return 1\n    }\n    return 0\n  })\n}\n\nconst convertDates = (tasks) => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date)\n      return task\n    })\n  } else {\n    return tasks.task.attributes.due_date = new Date(tasks.task.attributes.due_date)\n    return task\n    debugger\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}