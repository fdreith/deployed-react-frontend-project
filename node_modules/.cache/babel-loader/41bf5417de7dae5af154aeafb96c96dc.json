{"ast":null,"code":"export default ((state = {\n  myTasks: [],\n  assignedTasks: [],\n  completedTasks: []\n}, action) => {\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id).filter(task => task.attributes.completed === false);\n      const myTasks = tasks.filter(task => task.type === \"task\").filter(task => task.attributes.completed === false);\n      const completedTasks = tasks.filter(task => task.attributes.completed === true).filter(task => task.type === \"task\");\n      return {\n        myTasks,\n        assignedTasks,\n        completedTasks\n      };\n\n    case 'ADD_TASK':\n      if (isMyTask(action)) {\n        return { ...state,\n          myTasks: [...state.myTasks, action.task]\n        };\n      } else {\n        return { ...state,\n          assignedTasks: [...state.assignedTasks, action.task]\n        };\n      }\n\n    case 'UPDATE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          completedTasks\n        };\n      } else if (isMyTask(action)) {\n        const myTasks = state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'COMPLETED_TASK':\n      if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id);\n        const completedTasks = [...state.completedTasks, action.task];\n        return { ...state,\n          myTasks,\n          completedTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'DELETE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          completedTasks\n        };\n      } else if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'ADD_COMMENT':\n      debugger; // find task by taskId in any of the three state.s -- extract into an outside function and then add the comment..\n\n      if (isCompleted(action.comment.task_id)) {} else if (isMyTask(action.comment.task_id)) {} else {}\n\n    default:\n      return state;\n  }\n});\n\nconst isMyTask = action => {\n  return action.task.relationships.user.data.id === action.task.relationships.owner.data.id;\n};\n\nconst isCompleted = action => {\n  return action.task.attributes.completed;\n};\n\nconst convertDates = tasks => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date);\n    return task;\n  });\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","myTasks","assignedTasks","completedTasks","action","type","tasks","convertDates","filter","task","relationships","user","data","id","owner","attributes","completed","isMyTask","isCompleted","map","parseInt","taskId","comment","task_id","due_date","Date"],"mappings":"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","sourcesContent":["export default (state = {\n  myTasks: [], assignedTasks: [], completedTasks: []\n}, action) => {\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\")\n        .filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n        .filter(task => task.attributes.completed === false)\n      const myTasks = tasks.filter(task => task.type === \"task\")\n        .filter(task => task.attributes.completed === false)\n      const completedTasks = tasks.filter(task => task.attributes.completed === true)\n        .filter(task => task.type === \"task\")\n      return { myTasks, assignedTasks, completedTasks }\n    case 'ADD_TASK':\n      if (isMyTask(action)) {\n        return { ...state, myTasks: [...state.myTasks, action.task] }\n      } else {\n        return { ...state, assignedTasks: [...state.assignedTasks, action.task] }\n      }\n    case 'UPDATE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, completedTasks }\n      }\n      else if (isMyTask(action)) {\n        const myTasks = state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, assignedTasks }\n      }\n    case 'COMPLETED_TASK':\n      if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id)\n        const completedTasks = [...state.completedTasks, action.task]\n        return { ...state, myTasks, completedTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id)\n        return { ...state, assignedTasks }\n      }\n    case 'DELETE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, completedTasks }\n      } else if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, assignedTasks }\n      }\n    case 'ADD_COMMENT':\n      debugger\n    // find task by taskId in any of the three state.s -- extract into an outside function and then add the comment..\n      if (isCompleted(action.comment.task_id)) {\n        \n      } else if (isMyTask(action.comment.task_id)) {\n        \n      } else {\n        \n      }\n    default:\n      return state\n  }\n}\n\nconst isMyTask = (action) => {\n  return action.task.relationships.user.data.id === action.task.relationships.owner.data.id\n}\n\nconst isCompleted = (action) => {\n  return action.task.attributes.completed\n}\n\nconst convertDates = (tasks) => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date)\n    return task\n  })\n}\n"]},"metadata":{},"sourceType":"module"}