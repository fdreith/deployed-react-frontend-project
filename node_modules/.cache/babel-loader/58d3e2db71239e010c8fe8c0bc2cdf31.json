{"ast":null,"code":"export default ((state = [], action) => {\n  const isMyTask = task => {\n    return task.attributes.user.id === task.attributes.owner.id;\n  };\n\n  const isInMyTaskState = taskId => {\n    return state.myTasks.find(task => parseInt(task.id) === taskId);\n  };\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const sortedTasks = sortByDate(tasks);\n      return sortedTasks;\n\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task);\n      const newTasks = sortByDate([...state, newTask]);\n      return newTasks;\n\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task);\n      const updatedTasks = sortByDate(state.map(task => replaceIfEqual(task, convertedTask)));\n      return { ...state,\n        updatedTasks\n      };\n\n    case 'DELETE_TASK':\n      const filteredTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n      return { ...state,\n        filteredTasks\n      };\n\n    default:\n      return state;\n  }\n}); // const filterTasks = (tasks) => {\n//   const assignedTasks = sortByDate(tasks.filter(task => task.type === \"assigned_task\")\n//     .filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n//     .filter(task => task.attributes.completed === false))\n//   const myTasks = sortByDate(tasks.filter(task => task.type === \"task\")\n//     .filter(task => task.attributes.completed === false))\n//   const completedTasks = sortByDate(tasks.filter(task => task.attributes.completed === true)\n//     .filter(task => task.type === \"task\"))\n//   return { myTasks, assignedTasks, completedTasks }\n// }\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.attributes.id === actionTask.attributes.id) {\n    return actionTask;\n  } else {\n    return task;\n  }\n};\n\nconst convertDates = tasks => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date);\n      return task;\n    });\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date);\n    return tasks;\n  }\n};\n\nconst sortByDate = tasks => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date;\n    const dueDateB = b.attributes.due_date;\n\n    if (dueDateA < dueDateB) {\n      return -1;\n    }\n\n    if (dueDateA > dueDateB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","action","isMyTask","task","attributes","user","id","owner","isInMyTaskState","taskId","myTasks","find","parseInt","type","tasks","convertDates","sortedTasks","sortByDate","newTask","newTasks","convertedTask","updatedTasks","map","replaceIfEqual","filteredTasks","filter","actionTask","Array","isArray","due_date","Date","sort","a","b","dueDateA","dueDateB"],"mappings":"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","sourcesContent":["export default (state = [], action) => {\n\n  const isMyTask = (task) => {\n    return task.attributes.user.id === task.attributes.owner.id\n  }\n\n  const isInMyTaskState = taskId => {\n    return state.myTasks.find(task => parseInt(task.id) === taskId)\n  }\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const sortedTasks = sortByDate(tasks)\n      return sortedTasks\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task)\n      const newTasks = sortByDate([...state, newTask])\n      return newTasks\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task)\n      const updatedTasks = sortByDate(state.map(task => replaceIfEqual(task, convertedTask)))\n      return { ...state, updatedTasks }\n    case 'DELETE_TASK':\n      const filteredTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n      return { ...state, filteredTasks }\n    default:\n      return state\n  }\n}\n\n// const filterTasks = (tasks) => {\n//   const assignedTasks = sortByDate(tasks.filter(task => task.type === \"assigned_task\")\n//     .filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n//     .filter(task => task.attributes.completed === false))\n//   const myTasks = sortByDate(tasks.filter(task => task.type === \"task\")\n//     .filter(task => task.attributes.completed === false))\n//   const completedTasks = sortByDate(tasks.filter(task => task.attributes.completed === true)\n//     .filter(task => task.type === \"task\"))\n//   return { myTasks, assignedTasks, completedTasks }\n// }\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.attributes.id === actionTask.attributes.id) {\n    return actionTask\n  } else {\n    return task\n  }\n}\n\nconst convertDates = (tasks) => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date)\n      return task\n    })\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date)\n    return tasks\n  }\n}\n\nconst sortByDate = (tasks) => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date\n    const dueDateB = b.attributes.due_date\n    if (dueDateA < dueDateB) {\n      return -1\n    }\n    if (dueDateA > dueDateB) {\n      return 1\n    }\n    return 0\n  })\n}\n"]},"metadata":{},"sourceType":"module"}