{"ast":null,"code":"export default ((state = {\n  myTasks: [// {\n    // id: \"\",\n    // type: \"\",\n    // attributes: { id: \"\", content: \"\", due_date: \"\", completed: \"\", comments: [] }, user: \"\", owner: \"\"\n    // }\n  ],\n  assignedTasks: []\n}, action) => {\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id).sort;\n      const myTasks = tasks.filter(task => task.type === \"task\");\n      return {\n        myTasks,\n        assignedTasks\n      };\n\n    case 'ADD_TASK':\n      if (isMyTasks(action)) {\n        return { ...state,\n          myTasks: [...state.myTasks, action.task]\n        };\n      } else {\n        return { ...state,\n          assignedTasks: [...state.assignedTasks, action.task]\n        };\n      }\n\n    case 'UPDATE_TASK':\n      if (isMyTasks(action)) {\n        const newMyTasksState = state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          myTasks: newMyTasksState\n        };\n      } else {\n        const newAssignedTasksState = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          assignedTasks: newAssignedTasksState\n        };\n      }\n\n    case 'DELETE_TASK':\n      if (state.myTasks.find(task => task.attributes.id === action.taskId)) {\n        const newMyTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          myTasks: newMyTasks\n        };\n      } else {\n        const newAssignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          assignedTasks: newAssignedTasks\n        };\n      }\n\n    default:\n      return state;\n  }\n});\n\nconst convertDates = tasks => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date);\n    return task;\n  });\n};\n\nconst isMyTasks = action => {\n  return action.task.relationships.user.data.id === action.task.relationships.owner.data.id;\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","myTasks","assignedTasks","action","type","tasks","convertDates","filter","task","relationships","user","data","id","owner","sort","isMyTasks","newMyTasksState","map","newAssignedTasksState","find","attributes","taskId","newMyTasks","parseInt","newAssignedTasks","due_date","Date"],"mappings":"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","sourcesContent":["export default (state = {\n  myTasks: [\n    // {\n    // id: \"\",\n    // type: \"\",\n    // attributes: { id: \"\", content: \"\", due_date: \"\", completed: \"\", comments: [] }, user: \"\", owner: \"\"\n    // }\n  ], assignedTasks: []\n}, action) => {\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id).sort\n      const myTasks = tasks.filter(task => task.type === \"task\")\n      return { myTasks, assignedTasks }\n    case 'ADD_TASK':\n      if (isMyTasks(action)) {\n        return { ...state, myTasks: [...state.myTasks, action.task] }\n      } else {\n        return { ...state, assignedTasks: [...state.assignedTasks, action.task] }\n      }\n    case 'UPDATE_TASK':\n      if (isMyTasks(action)) {\n        const newMyTasksState = state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, myTasks: newMyTasksState }\n      } else {\n        const newAssignedTasksState = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, assignedTasks: newAssignedTasksState }\n      }\n\n    case 'DELETE_TASK':\n      if (state.myTasks.find(task => task.attributes.id === action.taskId)) {\n        const newMyTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, myTasks: newMyTasks }\n      } else {\n        const newAssignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, assignedTasks: newAssignedTasks }\n      }\n    default:\n      return state\n  }\n}\n\nconst convertDates = (tasks) => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date)\n    return task\n  })\n}\n\nconst isMyTasks = (action) => {\n  return action.task.relationships.user.data.id === action.task.relationships.owner.data.id\n}"]},"metadata":{},"sourceType":"module"}