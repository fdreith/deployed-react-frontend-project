{"ast":null,"code":"export default ((state = [], action) => {\n  switch (action.type) {\n    case 'SET_TASKS':\n      debugger;\n      things.thing = things.thing.filter((thing, index, self) => index === self.findIndex(t => t.place === thing.place && t.name === thing.name));\n      const tasks = convertDates(action.tasks);\n      const sortedTasks = sortByDate(tasks);\n      return sortedTasks;\n\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task);\n      const newTasks = sortByDate([...state, newTask]);\n      return newTasks;\n\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task);\n      debugger;\n      const updatedTasks = sortByDate(state.map(task => {\n        if (task.attributes.id === convertedTask.attributes.id) {\n          return convertedTask;\n        } else {\n          return task;\n        }\n      }));\n      return updatedTasks;\n\n    case 'DELETE_TASK':\n      const filteredTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n      return filteredTasks;\n\n    default:\n      return state;\n  }\n}); // const replaceIfEqual = (task, actionTask) => {\n//   if (task.attributes.id === actionTask.attributes.id) {\n//     return actionTask\n//   } else {\n//     return task\n//   }\n// }\n\nconst convertDates = tasks => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date);\n      return task;\n    });\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date);\n    return tasks;\n  }\n};\n\nconst sortByDate = tasks => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date;\n    const dueDateB = b.attributes.due_date;\n\n    if (dueDateA < dueDateB) {\n      return -1;\n    }\n\n    if (dueDateA > dueDateB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","action","type","things","thing","filter","index","self","findIndex","t","place","name","tasks","convertDates","sortedTasks","sortByDate","newTask","task","newTasks","convertedTask","updatedTasks","map","attributes","id","filteredTasks","myTasks","parseInt","taskId","Array","isArray","due_date","Date","sort","a","b","dueDateA","dueDateB"],"mappings":"AAAA,gBAAe,CAACA,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAErC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE;AACAC,MAAAA,MAAM,CAACC,KAAP,GAAeD,MAAM,CAACC,KAAP,CAAaC,MAAb,CAAoB,CAACD,KAAD,EAAQE,KAAR,EAAeC,IAAf,KACjCD,KAAK,KAAKC,IAAI,CAACC,SAAL,CAAgBC,CAAD,IACvBA,CAAC,CAACC,KAAF,KAAYN,KAAK,CAACM,KAAlB,IAA2BD,CAAC,CAACE,IAAF,KAAWP,KAAK,CAACO,IADpC,CADG,CAAf;AAKA,YAAMC,KAAK,GAAGC,YAAY,CAACZ,MAAM,CAACW,KAAR,CAA1B;AACA,YAAME,WAAW,GAAGC,UAAU,CAACH,KAAD,CAA9B;AACA,aAAOE,WAAP;;AACF,SAAK,UAAL;AACE,YAAME,OAAO,GAAGH,YAAY,CAACZ,MAAM,CAACgB,IAAR,CAA5B;AACA,YAAMC,QAAQ,GAAGH,UAAU,CAAC,CAAC,GAAGf,KAAJ,EAAWgB,OAAX,CAAD,CAA3B;AACA,aAAOE,QAAP;;AACF,SAAK,aAAL;AACE,YAAMC,aAAa,GAAGN,YAAY,CAACZ,MAAM,CAACgB,IAAR,CAAlC;AACA;AACA,YAAMG,YAAY,GAAGL,UAAU,CAACf,KAAK,CAACqB,GAAN,CAAUJ,IAAI,IAAI;AAChD,YAAIA,IAAI,CAACK,UAAL,CAAgBC,EAAhB,KAAuBJ,aAAa,CAACG,UAAd,CAAyBC,EAApD,EAAwD;AACtD,iBAAOJ,aAAP;AACD,SAFD,MAEO;AACL,iBAAOF,IAAP;AACD;AACF,OAN+B,CAAD,CAA/B;AAOA,aAAOG,YAAP;;AACF,SAAK,aAAL;AACE,YAAMI,aAAa,GAAGxB,KAAK,CAACyB,OAAN,CAAcpB,MAAd,CAAqBY,IAAI,IAAIS,QAAQ,CAACT,IAAI,CAACM,EAAN,CAAR,KAAsBtB,MAAM,CAAC0B,MAA1D,CAAtB;AACA,aAAOH,aAAP;;AACF;AACE,aAAOxB,KAAP;AA9BJ;AAgCD,CAlCD,E,CAoCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMa,YAAY,GAAID,KAAD,IAAW;AAC9B,MAAIgB,KAAK,CAACC,OAAN,CAAcjB,KAAd,CAAJ,EAA0B;AACxB,WAAOA,KAAK,CAACS,GAAN,CAAUJ,IAAI,IAAI;AACvBA,MAAAA,IAAI,CAACK,UAAL,CAAgBQ,QAAhB,GAA2B,IAAIC,IAAJ,CAASd,IAAI,CAACK,UAAL,CAAgBQ,QAAzB,CAA3B;AACA,aAAOb,IAAP;AACD,KAHM,CAAP;AAID,GALD,MAKO;AACLL,IAAAA,KAAK,CAACU,UAAN,CAAiBQ,QAAjB,GAA4B,IAAIC,IAAJ,CAASnB,KAAK,CAACU,UAAN,CAAiBQ,QAA1B,CAA5B;AACA,WAAOlB,KAAP;AACD;AACF,CAVD;;AAYA,MAAMG,UAAU,GAAIH,KAAD,IAAW;AAC5B,SAAOA,KAAK,CAACoB,IAAN,CAAW,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChC,UAAMC,QAAQ,GAAGF,CAAC,CAACX,UAAF,CAAaQ,QAA9B;AACA,UAAMM,QAAQ,GAAGF,CAAC,CAACZ,UAAF,CAAaQ,QAA9B;;AACA,QAAIK,QAAQ,GAAGC,QAAf,EAAyB;AACvB,aAAO,CAAC,CAAR;AACD;;AACD,QAAID,QAAQ,GAAGC,QAAf,EAAyB;AACvB,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAVM,CAAP;AAWD,CAZD","sourcesContent":["export default (state = [], action) => {\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      debugger\n      things.thing = things.thing.filter((thing, index, self) =>\n        index === self.findIndex((t) => (\n          t.place === thing.place && t.name === thing.name\n        ))\n      )\n      const tasks = convertDates(action.tasks)\n      const sortedTasks = sortByDate(tasks)\n      return sortedTasks\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task)\n      const newTasks = sortByDate([...state, newTask])\n      return newTasks\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task)\n      debugger\n      const updatedTasks = sortByDate(state.map(task => {\n        if (task.attributes.id === convertedTask.attributes.id) {\n          return convertedTask\n        } else {\n          return task\n        }\n      }))\n      return updatedTasks\n    case 'DELETE_TASK':\n      const filteredTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n      return filteredTasks\n    default:\n      return state\n  }\n}\n\n// const replaceIfEqual = (task, actionTask) => {\n//   if (task.attributes.id === actionTask.attributes.id) {\n//     return actionTask\n//   } else {\n//     return task\n//   }\n// }\n\nconst convertDates = (tasks) => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date)\n      return task\n    })\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date)\n    return tasks\n  }\n}\n\nconst sortByDate = (tasks) => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date\n    const dueDateB = b.attributes.due_date\n    if (dueDateA < dueDateB) {\n      return -1\n    }\n    if (dueDateA > dueDateB) {\n      return 1\n    }\n    return 0\n  })\n}\n"]},"metadata":{},"sourceType":"module"}