{"ast":null,"code":"export default ((state = [], action) => {\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = action.tasks.filter((task, index, self) => index === self.findIndex(t => {\n        return t.attributes.id === task.attributes.id;\n      }));\n      const convertedTasks = convertDates(tasks);\n      const sortedTasks = sortByDate(convertedTasks);\n      return sortedTasks;\n\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task);\n      const newTasks = sortByDate([...state, newTask]);\n      return newTasks;\n\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task);\n      const updatedTasks = sortByDate(state.map(task => {\n        if (task.attributes.id === convertedTask.attributes.id) {\n          return convertedTask;\n        } else {\n          return task;\n        }\n      }));\n      return updatedTasks;\n\n    case 'DELETE_TASK':\n      const filteredTasks = state.filter(task => parseInt(task.id) !== action.taskId);\n      return filteredTasks;\n\n    default:\n      return state;\n  }\n});\n\nconst convertDates = tasks => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date);\n      return task;\n    });\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date);\n    return tasks;\n  }\n};\n\nconst sortByDate = tasks => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date;\n    const dueDateB = b.attributes.due_date;\n\n    if (dueDateA < dueDateB) {\n      return -1;\n    }\n\n    if (dueDateA > dueDateB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};","map":{"version":3,"sources":["/Users/francescadreith/development/deployed-projects/deployed-react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","action","type","tasks","filter","task","index","self","findIndex","t","attributes","id","convertedTasks","convertDates","sortedTasks","sortByDate","newTask","newTasks","convertedTask","updatedTasks","map","filteredTasks","parseInt","taskId","Array","isArray","due_date","Date","sort","a","b","dueDateA","dueDateB"],"mappings":"AAAA,gBAAe,CAACA,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAErC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,YAAMC,KAAK,GAAGF,MAAM,CAACE,KAAP,CAAaC,MAAb,CAAoB,CAACC,IAAD,EAAOC,KAAP,EAAcC,IAAd,KAChCD,KAAK,KAAKC,IAAI,CAACC,SAAL,CAAgBC,CAAD,IAAO;AAC9B,eAAOA,CAAC,CAACC,UAAF,CAAaC,EAAb,KAAoBN,IAAI,CAACK,UAAL,CAAgBC,EAA3C;AACD,OAFS,CADE,CAAd;AAKA,YAAMC,cAAc,GAAGC,YAAY,CAACV,KAAD,CAAnC;AACA,YAAMW,WAAW,GAAGC,UAAU,CAACH,cAAD,CAA9B;AACA,aAAOE,WAAP;;AACF,SAAK,UAAL;AACE,YAAME,OAAO,GAAGH,YAAY,CAACZ,MAAM,CAACI,IAAR,CAA5B;AACA,YAAMY,QAAQ,GAAGF,UAAU,CAAC,CAAC,GAAGf,KAAJ,EAAWgB,OAAX,CAAD,CAA3B;AACA,aAAOC,QAAP;;AACF,SAAK,aAAL;AACE,YAAMC,aAAa,GAAGL,YAAY,CAACZ,MAAM,CAACI,IAAR,CAAlC;AACA,YAAMc,YAAY,GAAGJ,UAAU,CAACf,KAAK,CAACoB,GAAN,CAAUf,IAAI,IAAI;AAChD,YAAIA,IAAI,CAACK,UAAL,CAAgBC,EAAhB,KAAuBO,aAAa,CAACR,UAAd,CAAyBC,EAApD,EAAwD;AACtD,iBAAOO,aAAP;AACD,SAFD,MAEO;AACL,iBAAOb,IAAP;AACD;AACF,OAN+B,CAAD,CAA/B;AAOA,aAAOc,YAAP;;AACF,SAAK,aAAL;AACE,YAAME,aAAa,GAAGrB,KAAK,CAACI,MAAN,CAAaC,IAAI,IAAIiB,QAAQ,CAACjB,IAAI,CAACM,EAAN,CAAR,KAAsBV,MAAM,CAACsB,MAAlD,CAAtB;AACA,aAAOF,aAAP;;AACF;AACE,aAAOrB,KAAP;AA5BJ;AA8BD,CAhCD;;AAkCA,MAAMa,YAAY,GAAIV,KAAD,IAAW;AAC9B,MAAIqB,KAAK,CAACC,OAAN,CAActB,KAAd,CAAJ,EAA0B;AACxB,WAAOA,KAAK,CAACiB,GAAN,CAAUf,IAAI,IAAI;AACvBA,MAAAA,IAAI,CAACK,UAAL,CAAgBgB,QAAhB,GAA2B,IAAIC,IAAJ,CAAStB,IAAI,CAACK,UAAL,CAAgBgB,QAAzB,CAA3B;AACA,aAAOrB,IAAP;AACD,KAHM,CAAP;AAID,GALD,MAKO;AACLF,IAAAA,KAAK,CAACO,UAAN,CAAiBgB,QAAjB,GAA4B,IAAIC,IAAJ,CAASxB,KAAK,CAACO,UAAN,CAAiBgB,QAA1B,CAA5B;AACA,WAAOvB,KAAP;AACD;AACF,CAVD;;AAYA,MAAMY,UAAU,GAAIZ,KAAD,IAAW;AAC5B,SAAOA,KAAK,CAACyB,IAAN,CAAW,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChC,UAAMC,QAAQ,GAAGF,CAAC,CAACnB,UAAF,CAAagB,QAA9B;AACA,UAAMM,QAAQ,GAAGF,CAAC,CAACpB,UAAF,CAAagB,QAA9B;;AACA,QAAIK,QAAQ,GAAGC,QAAf,EAAyB;AACvB,aAAO,CAAC,CAAR;AACD;;AACD,QAAID,QAAQ,GAAGC,QAAf,EAAyB;AACvB,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAVM,CAAP;AAWD,CAZD","sourcesContent":["export default (state = [], action) => {\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = action.tasks.filter((task, index, self) =>\n        index === self.findIndex((t) => {\n          return t.attributes.id === task.attributes.id\n        })\n      )\n      const convertedTasks = convertDates(tasks)\n      const sortedTasks = sortByDate(convertedTasks)\n      return sortedTasks\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task)\n      const newTasks = sortByDate([...state, newTask])\n      return newTasks\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task)\n      const updatedTasks = sortByDate(state.map(task => {\n        if (task.attributes.id === convertedTask.attributes.id) {\n          return convertedTask\n        } else {\n          return task\n        }\n      }))\n      return updatedTasks\n    case 'DELETE_TASK':\n      const filteredTasks = state.filter(task => parseInt(task.id) !== action.taskId)\n      return filteredTasks\n    default:\n      return state\n  }\n}\n\nconst convertDates = (tasks) => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date)\n      return task\n    })\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date)\n    return tasks\n  }\n}\n\nconst sortByDate = (tasks) => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date\n    const dueDateB = b.attributes.due_date\n    if (dueDateA < dueDateB) {\n      return -1\n    }\n    if (dueDateA > dueDateB) {\n      return 1\n    }\n    return 0\n  })\n}\n"]},"metadata":{},"sourceType":"module"}