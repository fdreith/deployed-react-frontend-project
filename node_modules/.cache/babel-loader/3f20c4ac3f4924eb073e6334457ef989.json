{"ast":null,"code":"export default ((state = {\n  myTasks: [],\n  assignedTasks: [],\n  completedTasks: []\n}, action) => {\n  const isMyTask = taskId => {\n    debugger;\n    return state.myTasks.find(task => parseInt(task.id) === taskId);\n  };\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id).filter(task => task.attributes.completed === false);\n      const myTasks = tasks.filter(task => task.type === \"task\").filter(task => task.attributes.completed === false);\n      const completedTasks = tasks.filter(task => task.attributes.completed === true).filter(task => task.type === \"task\");\n      return {\n        myTasks,\n        assignedTasks,\n        completedTasks\n      };\n\n    case 'ADD_TASK':\n      if (isMyTask(action.task.attributes.id)) {\n        return { ...state,\n          myTasks: [...state.myTasks, action.task]\n        };\n      } else {\n        return { ...state,\n          assignedTasks: [...state.assignedTasks, action.task]\n        };\n      }\n\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action);\n\n      if (isMyTask(action.task.attributes.id)) {\n        const myTasks = state.myTasks.map(task => replaceIfEqual(task, convertedTask.task));\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => replaceIfEqual(task, convertedTask.task));\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'COMPLETED_TASK':\n      if (isMyTask(action.task.attributes.id)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id);\n        const completedTasks = [...state.completedTasks, action.task];\n        return { ...state,\n          myTasks,\n          completedTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'DELETE_TASK':\n      if (isMyTask(action.taskId)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    default:\n      return state;\n  }\n});\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.id === actionTask.id) {\n    return actionTask;\n  } else {\n    return task;\n  }\n};\n\nconst convertDates = tasks => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date);\n      return task;\n    });\n  } else {\n    tasks.task.attributes.due_date = new Date(tasks.task.attributes.due_date);\n    return tasks;\n  }\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","myTasks","assignedTasks","completedTasks","action","isMyTask","taskId","find","task","parseInt","id","type","tasks","convertDates","filter","relationships","user","data","owner","attributes","completed","convertedTask","map","replaceIfEqual","actionTask","Array","isArray","due_date","Date"],"mappings":"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","sourcesContent":["export default (state = {\n  myTasks: [], assignedTasks: [], completedTasks: []\n}, action) => {\n\n  const isMyTask = (taskId) => {\n    debugger\n      return state.myTasks.find(task => parseInt(task.id) === taskId)\n\n  }\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\")\n        .filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n        .filter(task => task.attributes.completed === false)\n      const myTasks = tasks.filter(task => task.type === \"task\")\n        .filter(task => task.attributes.completed === false)\n      const completedTasks = tasks.filter(task => task.attributes.completed === true)\n        .filter(task => task.type === \"task\")\n      return { myTasks, assignedTasks, completedTasks }\n    case 'ADD_TASK':\n      if (isMyTask(action.task.attributes.id)) {\n        return { ...state, myTasks: [...state.myTasks, action.task] }\n      } else {\n        return { ...state, assignedTasks: [...state.assignedTasks, action.task] }\n      }\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action)\n      if (isMyTask(action.task.attributes.id)) {\n        const myTasks = state.myTasks.map(task => replaceIfEqual(task, convertedTask.task))\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => replaceIfEqual(task, convertedTask.task))\n        return { ...state, assignedTasks }\n      }\n    case 'COMPLETED_TASK':\n      if (isMyTask(action.task.attributes.id)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id)\n        const completedTasks = [...state.completedTasks, action.task]\n        return { ...state, myTasks, completedTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id)\n        return { ...state, assignedTasks }\n      }\n    case 'DELETE_TASK':\n      if (isMyTask(action.taskId)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, assignedTasks }\n      }\n    default:\n      return state\n  }\n}\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.id === actionTask.id) {\n    return actionTask\n  } else {\n    return task\n  }\n}\n\nconst convertDates = (tasks) => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date)\n      return task\n    })\n  } else {\n    tasks.task.attributes.due_date = new Date(tasks.task.attributes.due_date)\n    return tasks\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}