{"ast":null,"code":"const isMyTask = action => {\n  return action.task ? action.task.relationships.user.data.id === action.task.relationships.owner.data.id : state.myTasks.find(task => parseInt(task.id) === action.comment.task_id);\n};\n\nconst isCompleted = action => {\n  return action.task ? action.task.attributes.completed : state.completedTasks.find(task => parseInt(task.id) === action.comment.task_id);\n};\n\nexport default ((state = {\n  myTasks: [],\n  assignedTasks: [],\n  completedTasks: []\n}, action) => {\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id).filter(task => task.attributes.completed === false);\n      const myTasks = tasks.filter(task => task.type === \"task\").filter(task => task.attributes.completed === false);\n      const completedTasks = tasks.filter(task => task.attributes.completed === true).filter(task => task.type === \"task\");\n      return {\n        myTasks,\n        assignedTasks,\n        completedTasks\n      };\n\n    case 'ADD_TASK':\n      if (isMyTask(action)) {\n        return { ...state,\n          myTasks: [...state.myTasks, action.task]\n        };\n      } else {\n        return { ...state,\n          assignedTasks: [...state.assignedTasks, action.task]\n        };\n      }\n\n    case 'UPDATE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          completedTasks\n        };\n      } else if (isMyTask(action)) {\n        const myTasks = state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'COMPLETED_TASK':\n      if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id);\n        const completedTasks = [...state.completedTasks, action.task];\n        return { ...state,\n          myTasks,\n          completedTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'DELETE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          completedTasks\n        };\n      } else if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'ADD_COMMENT':\n      debugger; // find task by taskId in any of the three state.s -- extract into an outside function and then add the comment..\n\n      if (isCompleted(action.comment.task_id)) {\n        debugger;\n      } else if (isMyTask(action.comment.task_id)) {\n        debugger;\n      } else {\n        debugger;\n      }\n\n    default:\n      return state;\n  }\n});\n\nconst convertDates = tasks => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date);\n    return task;\n  });\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["isMyTask","action","task","relationships","user","data","id","owner","state","myTasks","find","parseInt","comment","task_id","isCompleted","attributes","completed","completedTasks","assignedTasks","type","tasks","convertDates","filter","map","taskId","due_date","Date"],"mappings":"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","sourcesContent":["const isMyTask = (action) => {\n  return action.task ?\n    action.task.relationships.user.data.id === action.task.relationships.owner.data.id\n    :\n    state.myTasks.find(task => parseInt(task.id) === action.comment.task_id)\n}\n\nconst isCompleted = (action) => {\n  return action.task ?\n    action.task.attributes.completed\n    :\n    state.completedTasks.find(task => parseInt(task.id) === action.comment.task_id)\n}\nexport default (state = {\n  myTasks: [], assignedTasks: [], completedTasks: []\n}, action) => {\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\")\n        .filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n        .filter(task => task.attributes.completed === false)\n      const myTasks = tasks.filter(task => task.type === \"task\")\n        .filter(task => task.attributes.completed === false)\n      const completedTasks = tasks.filter(task => task.attributes.completed === true)\n        .filter(task => task.type === \"task\")\n      return { myTasks, assignedTasks, completedTasks }\n    case 'ADD_TASK':\n      if (isMyTask(action)) {\n        return { ...state, myTasks: [...state.myTasks, action.task] }\n      } else {\n        return { ...state, assignedTasks: [...state.assignedTasks, action.task] }\n      }\n    case 'UPDATE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, completedTasks }\n      }\n      else if (isMyTask(action)) {\n        const myTasks = state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, assignedTasks }\n      }\n    case 'COMPLETED_TASK':\n      if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id)\n        const completedTasks = [...state.completedTasks, action.task]\n        return { ...state, myTasks, completedTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id)\n        return { ...state, assignedTasks }\n      }\n    case 'DELETE_TASK':\n      if (isCompleted(action)) {\n        const completedTasks = state.completedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, completedTasks }\n      } else if (isMyTask(action)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, assignedTasks }\n      }\n    case 'ADD_COMMENT':\n      debugger\n      // find task by taskId in any of the three state.s -- extract into an outside function and then add the comment..\n      if (isCompleted(action.comment.task_id)) {\n        debugger\n      } else if (isMyTask(action.comment.task_id)) {\n        debugger\n\n      } else {\n        debugger\n\n      }\n    default:\n      return state\n  }\n\n\n}\nconst convertDates = (tasks) => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date)\n    return task\n  })\n}\n"]},"metadata":{},"sourceType":"module"}