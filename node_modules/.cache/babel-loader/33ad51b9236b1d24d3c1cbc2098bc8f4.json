{"ast":null,"code":"export default ((state = {\n  myTasks: [],\n  assignedTasks: [],\n  completedTasks: []\n}, action) => {\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id).filter(task => task.attributes.completed === false);\n      const myTasks = tasks.filter(task => task.type === \"task\").filter(task => task.attributes.completed === false);\n      const completedTasks = myTasks.filter(task => task.attributes.completed === true);\n      return {\n        myTasks,\n        assignedTasks,\n        completedTasks\n      };\n\n    case 'ADD_TASK':\n      if (isMyTasks(action)) {\n        return { ...state,\n          myTasks: [...state.myTasks, action.task]\n        };\n      } else {\n        return { ...state,\n          assignedTasks: [...state.assignedTasks, action.task]\n        };\n      }\n\n    case 'UPDATE_TASK':\n      if (isMyTasks(action)) {\n        const newMyTasksState = state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          myTasks: newMyTasksState\n        };\n      } else {\n        const newAssignedTasksState = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          assignedTasks: newAssignedTasksState\n        };\n      }\n\n    case 'COMPLETED_TASK':\n      if (isMyTasks(action)) {\n        const myTasks = state.myTasks.filter(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const newAssignedTasksState = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task;\n          } else {\n            return task;\n          }\n        });\n        return { ...state,\n          assignedTasks: newAssignedTasksState\n        };\n      }\n\n    case 'DELETE_TASK':\n      if (state.myTasks.find(task => task.attributes.id === action.taskId)) {\n        const newMyTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          myTasks: newMyTasks\n        };\n      } else {\n        const newAssignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          assignedTasks: newAssignedTasks\n        };\n      }\n\n    default:\n      return state;\n  }\n});\n\nconst convertDates = tasks => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date);\n    return task;\n  });\n};\n\nconst isMyTasks = action => {\n  return action.task.relationships.user.data.id === action.task.relationships.owner.data.id;\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","myTasks","assignedTasks","completedTasks","action","type","tasks","convertDates","filter","task","relationships","user","data","id","owner","attributes","completed","isMyTasks","newMyTasksState","map","newAssignedTasksState","find","taskId","newMyTasks","parseInt","newAssignedTasks","due_date","Date"],"mappings":"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","sourcesContent":["export default (state = {\n  myTasks: [], assignedTasks: [], completedTasks: []\n}, action) => {\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const assignedTasks = tasks.filter(task => task.type === \"assigned_task\")\n        .filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n        .filter(task => task.attributes.completed === false)\n      const myTasks = tasks.filter(task => task.type === \"task\")\n        .filter(task => task.attributes.completed === false)\n      const completedTasks = myTasks.filter(task => task.attributes.completed === true)\n      return { myTasks, assignedTasks, completedTasks }\n    case 'ADD_TASK':\n      if (isMyTasks(action)) {\n        return { ...state, myTasks: [...state.myTasks, action.task] }\n      } else {\n        return { ...state, assignedTasks: [...state.assignedTasks, action.task] }\n      }\n    case 'UPDATE_TASK':\n      if (isMyTasks(action)) {\n        const newMyTasksState = state.myTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, myTasks: newMyTasksState }\n      } else {\n        const newAssignedTasksState = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, assignedTasks: newAssignedTasksState }\n      }\n    case 'COMPLETED_TASK':\n      if (isMyTasks(action)) {\n        const myTasks = state.myTasks.filter(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, myTasks }\n      } else {\n        const newAssignedTasksState = state.assignedTasks.map(task => {\n          if (task.id === action.task.id) {\n            return action.task\n          } else {\n            return task\n          }\n        })\n        return { ...state, assignedTasks: newAssignedTasksState }\n      }\n\n    case 'DELETE_TASK':\n      if (state.myTasks.find(task => task.attributes.id === action.taskId)) {\n        const newMyTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, myTasks: newMyTasks }\n      } else {\n        const newAssignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, assignedTasks: newAssignedTasks }\n      }\n    default:\n      return state\n  }\n}\n\nconst convertDates = (tasks) => {\n  return tasks.map(task => {\n    task.attributes.due_date = new Date(task.attributes.due_date)\n    return task\n  })\n}\n\nconst isMyTasks = (action) => {\n  return action.task.relationships.user.data.id === action.task.relationships.owner.data.id\n}"]},"metadata":{},"sourceType":"module"}