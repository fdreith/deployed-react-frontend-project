{"ast":null,"code":"export default ((state = [], action) => {\n  const isMyTask = task => {\n    return task.attributes.user.id === task.attributes.owner.id;\n  };\n\n  const isInMyTaskState = taskId => {\n    return state.myTasks.find(task => parseInt(task.id) === taskId);\n  };\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks);\n      const taskState = filterTasks(tasks);\n      return taskState;\n\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task);\n\n      if (isMyTask(action.task)) {\n        const myTasks = sortByDate([...state.myTasks, newTask]);\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = sortByDate([...state.assignedTasks, newTask]);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task);\n\n      if (isInMyTaskState(action.task.attributes.id)) {\n        if (isMyTask(action.task)) {\n          const myTasks = sortByDate(state.myTasks.map(task => replaceIfEqual(task, convertedTask)));\n          return { ...state,\n            myTasks\n          };\n        } else {\n          const newMyTasks = sortByDate(state.myTasks.filter(task => parseInt(task.id) !== action.task.attributes.id));\n          return { ...state,\n            myTasks: newMyTasks,\n            assignedTasks: [...state.assignedTasks, convertedTask]\n          };\n        }\n      } else {\n        if (isMyTask(action.task)) {\n          const newAssignedTasks = sortByDate(state.assignedTasks.filter(task => parseInt(task.id) !== action.task.attributes.id));\n          return { ...state,\n            myTasks: [...state.myTasks, convertedTask],\n            assignedTasks: newAssignedTasks\n          };\n        } else {\n          const assignedTasks = sortByDate(state.assignedTasks.map(task => replaceIfEqual(task, convertedTask)));\n          return { ...state,\n            assignedTasks\n          };\n        }\n      }\n\n    case 'COMPLETED_TASK':\n      if (isInMyTaskState(action.task.attributes.id)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id);\n        const completedTasks = [...state.completedTasks, action.task];\n        return { ...state,\n          myTasks,\n          completedTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'DELETE_TASK':\n      if (isInMyTaskState(action.taskId)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId);\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    case 'UPDATE_PRIORITY':\n      const updatePriority = {\n        priority: action.task.counter + 1\n      };\n      const prioritizedTask = { ...action.task.task,\n        ...updatePriority\n      };\n\n      if (isInMyTaskState(action.task.task.attributes.id)) {\n        const myTasks = state.myTasks.map(task => {\n          return replaceIfEqual(task, prioritizedTask);\n        });\n        return { ...state,\n          myTasks\n        };\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => {\n          return replaceIfEqual(task, prioritizedTask);\n        });\n        return { ...state,\n          assignedTasks\n        };\n      }\n\n    default:\n      return state;\n  }\n});\n\nconst filterTasks = tasks => {\n  const assignedTasks = sortByDate(tasks.filter(task => task.type === \"assigned_task\").filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id).filter(task => task.attributes.completed === false));\n  const myTasks = sortByDate(tasks.filter(task => task.type === \"task\").filter(task => task.attributes.completed === false));\n  const completedTasks = sortByDate(tasks.filter(task => task.attributes.completed === true).filter(task => task.type === \"task\"));\n  return {\n    myTasks,\n    assignedTasks,\n    completedTasks\n  };\n};\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.attributes.id === actionTask.attributes.id) {\n    return actionTask;\n  } else {\n    return task;\n  }\n};\n\nconst convertDates = tasks => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date);\n      return task;\n    });\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date);\n    return tasks;\n  }\n};\n\nconst sortByDate = tasks => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date;\n    const dueDateB = b.attributes.due_date;\n\n    if (dueDateA < dueDateB) {\n      return -1;\n    }\n\n    if (dueDateA > dueDateB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};","map":{"version":3,"sources":["/Users/francescadreith/development/projects/react-redux-project/react-project-frontend/src/reducers/tasks.js"],"names":["state","action","isMyTask","task","attributes","user","id","owner","isInMyTaskState","taskId","myTasks","find","parseInt","type","tasks","convertDates","taskState","filterTasks","newTask","sortByDate","assignedTasks","convertedTask","map","replaceIfEqual","newMyTasks","filter","newAssignedTasks","completedTasks","updatePriority","priority","counter","prioritizedTask","relationships","data","completed","actionTask","Array","isArray","due_date","Date","sort","a","b","dueDateA","dueDateB"],"mappings":"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","sourcesContent":["export default (state = [], action) => {\n\n  const isMyTask = (task) => {\n    return task.attributes.user.id === task.attributes.owner.id\n  }\n\n  const isInMyTaskState = taskId => {\n    return state.myTasks.find(task => parseInt(task.id) === taskId)\n  }\n\n  switch (action.type) {\n    case 'SET_TASKS':\n      const tasks = convertDates(action.tasks)\n      const taskState = filterTasks(tasks)\n      return taskState\n    case 'ADD_TASK':\n      const newTask = convertDates(action.task)\n      if (isMyTask(action.task)) {\n        const myTasks = sortByDate([...state.myTasks, newTask])\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = sortByDate([...state.assignedTasks, newTask])\n        return { ...state, assignedTasks }\n      }\n    case 'UPDATE_TASK':\n      const convertedTask = convertDates(action.task)\n      if (isInMyTaskState(action.task.attributes.id)) {\n        if (isMyTask(action.task)) {\n          const myTasks = sortByDate(state.myTasks.map(task => replaceIfEqual(task, convertedTask)))\n          return { ...state, myTasks }\n        } else {\n          const newMyTasks = sortByDate(state.myTasks.filter(task => parseInt(task.id) !== action.task.attributes.id))\n          return { ...state, myTasks: newMyTasks, assignedTasks: [...state.assignedTasks, convertedTask] }\n        }\n      } else {\n        if (isMyTask(action.task)) {\n          const newAssignedTasks = sortByDate(state.assignedTasks.filter(task => parseInt(task.id) !== action.task.attributes.id))\n          return { ...state, myTasks: [...state.myTasks, convertedTask], assignedTasks: newAssignedTasks }\n        }\n        else {\n          const assignedTasks = sortByDate(state.assignedTasks.map(task => replaceIfEqual(task, convertedTask)))\n          return { ...state, assignedTasks }\n        }\n      }\n    case 'COMPLETED_TASK':\n      if (isInMyTaskState(action.task.attributes.id)) {\n        const myTasks = state.myTasks.filter(task => task.id !== action.task.id)\n        const completedTasks = [...state.completedTasks, action.task]\n        return { ...state, myTasks, completedTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => task.id !== action.task.id)\n        return { ...state, assignedTasks }\n      }\n    case 'DELETE_TASK':\n      if (isInMyTaskState(action.taskId)) {\n        const myTasks = state.myTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.filter(task => parseInt(task.id) !== action.taskId)\n        return { ...state, assignedTasks }\n      }\n    case 'UPDATE_PRIORITY':\n      const updatePriority = { priority: action.task.counter + 1 }\n      const prioritizedTask = { ...action.task.task, ...updatePriority }\n      if (isInMyTaskState(action.task.task.attributes.id)) {\n        const myTasks = state.myTasks.map(task => {\n          return replaceIfEqual(task, prioritizedTask)\n        })\n        return { ...state, myTasks }\n      } else {\n        const assignedTasks = state.assignedTasks.map(task => {\n          return replaceIfEqual(task, prioritizedTask)\n        })\n        return { ...state, assignedTasks }\n      }\n    default:\n      return state\n  }\n}\n\nconst filterTasks = (tasks) => {\n  const assignedTasks = sortByDate(tasks.filter(task => task.type === \"assigned_task\")\n    .filter(task => task.relationships.user.data.id !== task.relationships.owner.data.id)\n    .filter(task => task.attributes.completed === false))\n  const myTasks = sortByDate(tasks.filter(task => task.type === \"task\")\n    .filter(task => task.attributes.completed === false))\n  const completedTasks = sortByDate(tasks.filter(task => task.attributes.completed === true)\n    .filter(task => task.type === \"task\"))\n  return { myTasks, assignedTasks, completedTasks }\n}\n\nconst replaceIfEqual = (task, actionTask) => {\n  if (task.attributes.id === actionTask.attributes.id) {\n    return actionTask\n  } else {\n    return task\n  }\n}\n\nconst convertDates = (tasks) => {\n  if (Array.isArray(tasks)) {\n    return tasks.map(task => {\n      task.attributes.due_date = new Date(task.attributes.due_date)\n      return task\n    })\n  } else {\n    tasks.attributes.due_date = new Date(tasks.attributes.due_date)\n    return tasks\n  }\n}\n\nconst sortByDate = (tasks) => {\n  return tasks.sort(function (a, b) {\n    const dueDateA = a.attributes.due_date\n    const dueDateB = b.attributes.due_date\n    if (dueDateA < dueDateB) {\n      return -1\n    }\n    if (dueDateA > dueDateB) {\n      return 1\n    }\n    return 0\n  })\n}\n"]},"metadata":{},"sourceType":"module"}